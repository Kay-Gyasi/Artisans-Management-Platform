// <auto-generated />
using System;
using AMP.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AMP.Persistence.Migrations
{
    [DbContext(typeof(AmpDbContext))]
    partial class AmpDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AMP.Domain.Entities.BusinessManagement.Dispute", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 157, DateTimeKind.Utc).AddTicks(7741));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Open");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Status");

                    b.ToTable("Disputes", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.BusinessManagement.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("ArtisanId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 159, DateTimeKind.Utc).AddTicks(5064));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<bool>("IsArtisanComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequestAccepted")
                        .HasColumnType("bit");

                    b.Property<decimal>("PaymentMade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PreferredCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PreferredStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("Scope")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Maintenance");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Placed");

                    b.Property<string>("Urgency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Medium");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ArtisanId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReferenceNo")
                        .HasDatabaseName("IX_Orders_ReferenceNo");

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("IX_Service_CusUserId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Status_ArtisanUserId");

                    b.HasIndex("Id", "IsArtisanComplete")
                        .HasDatabaseName("IX_Id_IsArtisanComplete");

                    b.HasIndex("Status", "IsRequestAccepted")
                        .HasDatabaseName("IX_Status_RequestAc_UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.BusinessManagement.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<decimal>("AmountPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 170, DateTimeKind.Utc).AddTicks(6707));

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<bool>("IsForwarded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("TransactionReference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsVerified")
                        .HasDatabaseName("IX_Artisan_Verified");

                    b.HasIndex("Reference")
                        .HasDatabaseName("IX_Reference");

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.HasIndex("TransactionReference")
                        .HasDatabaseName("IX_TrxRef");

                    b.HasIndex("OrderId", "IsVerified")
                        .HasDatabaseName("IX_Order_Verified");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.BusinessManagement.Rating", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("ArtisanId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 172, DateTimeKind.Utc).AddTicks(4983));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<int>("Votes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ArtisanId")
                        .HasDatabaseName("IX_ArtisanId");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_CustomerId");

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.HasIndex("ArtisanId", "CustomerId")
                        .HasDatabaseName("IX_ArtisanId_CustomerId");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.BusinessManagement.Request", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("ArtisanId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 174, DateTimeKind.Utc).AddTicks(5));

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ArtisanId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.ToTable("Requests", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.BusinessManagement.Service", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 194, DateTimeKind.Utc).AddTicks(6384));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Description")
                        .HasDatabaseName("IX_Services_Desc");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Services_Name");

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.Messaging.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 198, DateTimeKind.Utc).AddTicks(8071));

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("SenderId")
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ConversationId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.Messaging.ConnectRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 211, DateTimeKind.Utc).AddTicks(4494));

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<string>("InviteeId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("InviterId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("InviteeId");

                    b.HasIndex("InviterId");

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.ToTable("ConnectRequests", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.Messaging.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 219, DateTimeKind.Utc).AddTicks(4222));

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<string>("FirstParticipantId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("SecondParticipantId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("FirstParticipantId");

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.HasIndex("SecondParticipantId");

                    b.ToTable("Conversations", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.Messaging.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 230, DateTimeKind.Utc).AddTicks(3656));

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.Artisan", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 233, DateTimeKind.Utc).AddTicks(3896));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ECCN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Individual");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("BusinessName")
                        .HasDatabaseName("Index_Artisan_BusinessName");

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.HasIndex("Type")
                        .HasDatabaseName("Index_Artisan_Type");

                    b.HasIndex("UserId");

                    b.ToTable("Artisans", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 237, DateTimeKind.Utc).AddTicks(4254));

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.HasIndex("UserId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 239, DateTimeKind.Utc).AddTicks(3447));

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.Invitation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 241, DateTimeKind.Utc).AddTicks(4369));

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<string>("InvitedPhone")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("InvitedPhone")
                        .HasDatabaseName("Index_Phone");

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.ToTable("Invitations", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 243, DateTimeKind.Utc).AddTicks(3621));

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Name")
                        .HasDatabaseName("Index_Lang_Name");

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.Registration", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 245, DateTimeKind.Utc).AddTicks(2857));

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Phone")
                        .HasDatabaseName("IX_Registration_Phone");

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.HasIndex("VerificationCode")
                        .HasDatabaseName("IX_Code");

                    b.HasIndex("Phone", "VerificationCode")
                        .HasDatabaseName("IX_Code_Phone");

                    b.ToTable("Registrations", (string)null);
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 8, 13, 39, 27, 248, DateTimeKind.Utc).AddTicks(136));

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Normal");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("ImageId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsRemoved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSuspended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LevelOfEducation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MomoNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<string>("OtherName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordKey")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Customer");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RowId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RowId"));

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Type");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ArtisanService", b =>
                {
                    b.Property<string>("ArtisansId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("ServicesId")
                        .HasColumnType("varchar(36)");

                    b.HasKey("ArtisansId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ArtisanService");
                });

            modelBuilder.Entity("LanguageUser", b =>
                {
                    b.Property<string>("LanguagesId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("UsersId")
                        .HasColumnType("varchar(36)");

                    b.HasKey("LanguagesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("LanguageUser");
                });

            modelBuilder.Entity("AMP.Domain.Entities.BusinessManagement.Dispute", b =>
                {
                    b.HasOne("AMP.Domain.Entities.UserManagement.Customer", "Customer")
                        .WithMany("Disputes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.Domain.Entities.BusinessManagement.Order", "Order")
                        .WithMany("Disputes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AMP.Domain.Entities.BusinessManagement.Order", b =>
                {
                    b.HasOne("AMP.Domain.Entities.UserManagement.Artisan", "Artisan")
                        .WithMany("Orders")
                        .HasForeignKey("ArtisanId");

                    b.HasOne("AMP.Domain.Entities.UserManagement.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.Domain.Entities.BusinessManagement.Service", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AMP.Domain.ValueObjects.Address", "WorkAddress", b1 =>
                        {
                            b1.Property<string>("OrderId")
                                .HasColumnType("varchar(36)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(max)")
                                .HasDefaultValue("Ghana");

                            b1.Property<string>("StreetAddress")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar");

                            b1.Property<string>("StreetAddress2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Town")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Artisan");

                    b.Navigation("Customer");

                    b.Navigation("Service");

                    b.Navigation("WorkAddress");
                });

            modelBuilder.Entity("AMP.Domain.Entities.BusinessManagement.Payment", b =>
                {
                    b.HasOne("AMP.Domain.Entities.UserManagement.Customer", null)
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId");

                    b.HasOne("AMP.Domain.Entities.BusinessManagement.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AMP.Domain.Entities.BusinessManagement.Rating", b =>
                {
                    b.HasOne("AMP.Domain.Entities.UserManagement.Artisan", "Artisan")
                        .WithMany("Ratings")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.Domain.Entities.UserManagement.Customer", "Customer")
                        .WithMany("Ratings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AMP.Domain.Entities.BusinessManagement.Request", b =>
                {
                    b.HasOne("AMP.Domain.Entities.UserManagement.Artisan", "Artisan")
                        .WithMany("Requests")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.Domain.Entities.UserManagement.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.Domain.Entities.BusinessManagement.Order", "Order")
                        .WithMany("Requests")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AMP.Domain.Entities.Messaging.ChatMessage", b =>
                {
                    b.HasOne("AMP.Domain.Entities.Messaging.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.Domain.Entities.UserManagement.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.Domain.Entities.UserManagement.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId");

                    b.Navigation("Conversation");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("AMP.Domain.Entities.Messaging.ConnectRequest", b =>
                {
                    b.HasOne("AMP.Domain.Entities.UserManagement.User", "Invitee")
                        .WithMany("InviteeConnectRequests")
                        .HasForeignKey("InviteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.Domain.Entities.UserManagement.User", "Inviter")
                        .WithMany("InviterConnectRequests")
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invitee");

                    b.Navigation("Inviter");
                });

            modelBuilder.Entity("AMP.Domain.Entities.Messaging.Conversation", b =>
                {
                    b.HasOne("AMP.Domain.Entities.UserManagement.User", "FirstParticipant")
                        .WithMany("FirstParticipantConvos")
                        .HasForeignKey("FirstParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.Domain.Entities.UserManagement.User", "SecondParticipant")
                        .WithMany("SecondParticipantConvos")
                        .HasForeignKey("SecondParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstParticipant");

                    b.Navigation("SecondParticipant");
                });

            modelBuilder.Entity("AMP.Domain.Entities.Messaging.Notification", b =>
                {
                    b.HasOne("AMP.Domain.Entities.UserManagement.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.Artisan", b =>
                {
                    b.HasOne("AMP.Domain.Entities.UserManagement.User", "User")
                        .WithMany("Artisans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.Customer", b =>
                {
                    b.HasOne("AMP.Domain.Entities.UserManagement.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.Image", b =>
                {
                    b.HasOne("AMP.Domain.Entities.UserManagement.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("AMP.Domain.Entities.UserManagement.Image", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.User", b =>
                {
                    b.OwnsOne("AMP.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(36)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Country")
                                .HasColumnType("int");

                            b1.Property<string>("StreetAddress")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("varchar");

                            b1.Property<string>("StreetAddress2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Town")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("AMP.Domain.ValueObjects.Contact", "Contact", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(36)");

                            b1.Property<string>("EmailAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PrimaryContact")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("varchar");

                            b1.Property<string>("PrimaryContact2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PrimaryContact3")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("ArtisanService", b =>
                {
                    b.HasOne("AMP.Domain.Entities.UserManagement.Artisan", null)
                        .WithMany()
                        .HasForeignKey("ArtisansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.Domain.Entities.BusinessManagement.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguageUser", b =>
                {
                    b.HasOne("AMP.Domain.Entities.UserManagement.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.Domain.Entities.UserManagement.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AMP.Domain.Entities.BusinessManagement.Order", b =>
                {
                    b.Navigation("Disputes");

                    b.Navigation("Payments");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("AMP.Domain.Entities.BusinessManagement.Service", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("AMP.Domain.Entities.Messaging.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.Artisan", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.Customer", b =>
                {
                    b.Navigation("Disputes");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Ratings");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("AMP.Domain.Entities.UserManagement.User", b =>
                {
                    b.Navigation("Artisans");

                    b.Navigation("Customers");

                    b.Navigation("FirstParticipantConvos");

                    b.Navigation("Image");

                    b.Navigation("InviteeConnectRequests");

                    b.Navigation("InviterConnectRequests");

                    b.Navigation("Notifications");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SecondParticipantConvos");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
